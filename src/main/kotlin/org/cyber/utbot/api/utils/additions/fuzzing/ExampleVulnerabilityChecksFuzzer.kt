package org.cyber.utbot.api.utils.additions.fuzzing

import VulnerabilityArgumentsCheckWithDescription
import org.utbot.engine.SymbolicValue
import org.cyber.utbot.api.utils.additions.constraints.Constraints
import org.utbot.framework.plugin.api.ExecutableId
import org.utbot.framework.plugin.api.MethodId
import kotlin.random.Random

class ExampleVulnerabilityChecksFuzzer: VulnerabilityChecksFuzzer {
    private val strings = listOf("abcd", "random", "fuzzing")
    private val ints = listOf(2, 6, 999)
    private val testsCount = 5

    override fun generate(
        methodId: MethodId,
        parametersInfo: ParametersInfo?,
        constraints: Constraints,
        description: String,
        methods: List<String>,
        taintedArgs: MutableSet<Pair<SymbolicValue, Int>>,
        methodUnderTest: ExecutableId
    ): VulnerabilityArgumentsCheckWithDescription? {
        return if (methodId.classId.name == "org.example.checks.Example" && methodId.name == "internal") {     // change methodId.name to "internal" to run
            val signature = listOf("string", "int")
            val arguments = (0 until testsCount).map {
                    signature.map {
                    when(it) {
                        "string" -> strings[Random.nextInt(strings.size)]
                        "int"   -> ints[Random.nextInt(ints.size)]
                        else -> throw Exception("SimpleVulnerabilityChecksFuzzer: wrong type: $it")
                    }
                }
            }
            VulnerabilityArgumentsCheckWithDescription(signature, arguments, description)
        } else {
            null
        }
    }
}
