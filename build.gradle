tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
        freeCompilerArgs += ["-Xallow-result-return-type", "-Xsam-conversions=class"]
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    fetchInstrumentationJar
}

dependencies {
    implementation project(':utbot-framework')

    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-cli', version: '0.3.5'
    implementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    // Without this dependency testng tests do not run.
    implementation group: 'com.beust', name: 'jcommander', version: '1.48'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.5'
    implementation group: 'org.testng', name: 'testng', version: testNgVersion
    implementation("org.unittestbot.soot:soot-utbot-fork:${sootVersion}") {
        exclude group:'com.google.guava', module:'guava'
    }
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: '1.3.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation group: 'junit', name: 'junit', version: junit4Version
    implementation group: 'org.junit.platform', name: 'junit-platform-console-standalone', version: junit4PlatformVersion
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlinLoggingVersion
    implementation group: 'com.github.ajalt.clikt', name: 'clikt', version: cliktVersion
    implementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit5Version
    implementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j2Version
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j2Version
    implementation group: 'org.jacoco', name: 'org.jacoco.report', version: jacocoVersion
    implementation group: 'com.guardsquare', name: 'proguard-core', version: '9.0.8'
    implementation group: 'org.javassist', name: 'javassist', version: '3.29.1-GA'
    // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.11.1'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.12.5'
    fetchInstrumentationJar project(path: ':utbot-instrumentation', configuration: 'instrumentationArchive')

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.testng', name: 'testng', version: testNgVersion
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: mockitoInlineVersion
}

processResources {
    from(configurations.fetchInstrumentationJar) {
        into "lib"
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties properties = new Properties()
            //noinspection GroovyAssignabilityCheck
            properties['version'] = project.version.toString()
            properties.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

jar {
    manifest {
        attributes 'Main-Class': 'org.cyber.utbot.CliKt'
        attributes 'Bundle-SymbolicName': 'org.cyber.utbot'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'Cyber UtBot Java CLI'
        attributes 'JAR-Type': 'Fat JAR'
    }

    archiveVersion.set(project.version as String)

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task wrapper(type: Wrapper){
    gradleVersion = '7.2'
}

task prepareKotlinBuildScriptModel(type: Wrapper){}

test {
    useJUnitPlatform()
}
